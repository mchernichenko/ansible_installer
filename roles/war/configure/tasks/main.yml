---
- name: Search artifact
  artifactory:
    path: "{{ artifactory.path }}*conf/it/local"
  register: search

- debug:
    var: search
    verbosity: 1

- block:
  # Запуск команд на целевой машине перед установкой.
  # Чаще всего используется для "костылей" и лучше решать проблемы другим методом.
  - name: Run custom pre-configure scripts
    shell: "{{ item }}"
    with_items: "{{ pre_configure_scripts|default([]) }}"

  - name: Generate temp directory name
    set_fact:
      tmp_path: "{{ ansible_temp_dir | default('/tmp') }}/ansible-{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}_{{ 999999 | random }}"

  - name: Create temp directory
    file:
      path: "{{ tmp_path|default('/tmp') }}"
      state: directory
    delegate_to: localhost
    become: no

  - name: Download configs to local
    unarchive:
      src: "{{ artifactory.url }}/{{ search.artifact.full_path }}"
      dest: "{{ tmp_path }}"
      remote_src: yes
    delegate_to: localhost
    become: no

  - name: Try to find logback
    find:
      path: "{{ tmp_path }}"
      patterns: "*logback*"
      recurse: yes
    register: logback_file
    delegate_to: localhost
    become: no

  - name: Try to find backend-common properties
    find:
      path: "{{ app.conf_dir }}"
      patterns: "backed-common.properties"
      recurse: yes
    register: backend_common_on_server

  - debug:
      var: backend_common_on_server
      verbosity: 1

  - name: Remove backend-common if found
    file:
      path: "{{ tmp_path }}/conf/backend-common.properties"
      state: absent
    delegate_to: localhost
    become: no
    when: backend_common_on_server.matched > 0

  # Создание директорий и рекурсивное раскладывание шаблонов на сервер
  - name: Create folders for configs
    file:
      dest: "{{ app.app_dir }}/{{ item|replace(tmp_path, '') }}"
      state: directory
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/ -mindepth 2 -type d').split('\n') }}"

  - name: Copy all templates recursively
    template:
      src: "{{ item }}"
      dest: "{{ app.app_dir }}/{{ item|replace(tmp_path, '') }}"
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/ -mindepth 2 -type f').split('\n') }}"

  # Modify context xml
  - name: Remove old node from context.xml
    xml:
      path: "{{ app.conf_dir }}/context.xml"
      xpath: "{{ item.xpath }}"
      ensure: absent
    with_items: "{{ tomcat_context }}"
    when: tomcat_context is defined

  - name: Add new node to context.xml
    xml:
      path: "{{ app.conf_dir }}/context.xml"
      xpath: "/Context/{{ item.xpath }}"
      value: "{{ item.value|default(omit) }}"
    with_items: "{{ tomcat_context }}"
    when: tomcat_context is defined

  # Modify logback-real
  - debug:
      var: logback_file
      verbosity: 1

  - name: Try to find node in logback-real.xml
    xml:
      path: "{{ app.conf_dir }}/logback-real.xml"
      xpath: '//include[@resource="{{ logback_file.files.0.path|basename}}"]'
      count: true
    register: logback_node
    when: update_logback|default(true) and logback_file.files|default([])
    
  - debug:
      var: logback_node
      verbosity: 1

  - name: Add new node to logback-real.xml
    xml:
      path: "{{ app.conf_dir }}/logback-real.xml"
      xpath: "/configuration/include/@resource='{{ logback_file.files.0.path|basename }}'"
    when: update_logback|default(true) and logback_file.files|default([]) and logback_node.count == 0

  - name: Run custom post-configure scripts
    shell: "{{ item }}"
    with_items: "{{ post_configure_scripts|default([]) }}"

  - name: Remove temp directory
    delegate_to: localhost
    become: no
    file:
      path: "{{ tmp_path|default('/tmp') }}"
      state: absent

  when: search.artifact.found
  rescue:
    - debug: msg='WAR configuration for artifact with path "{{ artifactory.path }}" failed'
