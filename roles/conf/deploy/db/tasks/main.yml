---
- name: Check properties
  assert:
    that:
      - db is defined
      - db.database is defined
      - db.password is defined
      - db.user is defined

- name: Search artifact
  artifactory:
    path: "{{ artifactory.path }}*conf/{{ classifier }}/db*"
  register: search

- debug:
    var: search
    verbosity: 1

- block:
  - name: Generate temp directory name
    set_fact:
      tmp_path: "{{ ansible_temp_dir | default('/tmp') }}/ansible-{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}_{{ 999999|random }}"

  - name: Create temp directories
    file:
      path: "{{ tmp_path }}/{{ item }}"
      state: directory
    with_items:
      - src
      - target

  - name: Download configs to local
    unarchive:
      src: "{{ artifactory.url }}/{{ search.artifact.full_path }}"
      dest: "{{ tmp_path }}/src"
      #remote_src: yes
      copy: no
    when: search.artifact.found

  - name: Create folders for configs
    file:
      dest: "{{ tmp_path }}/target/{{ item|replace(tmp_path~'/src', '') }}"
      state: directory
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/src/ -mindepth 1 -type d').split('\n') }}"
    when: search.artifact.found

  - name: Copy all files recursively
    copy:
      src: "{{ item }}"
      dest: "{{ tmp_path }}/target/{{ item|replace(tmp_path~'/src', '') }}"
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/src/ -type f').split('\n') }}"
    when: search.artifact.found and not template

  - name: Copy all templates recursively
    template:
      src: "{{ item }}"
      dest: "{{ tmp_path }}/target/{{ item|replace(tmp_path~'/src', '') }}"
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/src/ -type f').split('\n') }}"
    when: search.artifact.found and template

  - name: Load configs to db
    shell: 'sqlplus -L "{{db.user}}/{{db.password}}@{{db.database}}" @setup.sql'
    args:
      chdir: "{{ item|replace('/setup.sql', '') }}"
    environment:
      NLS_LANG: "{{ nls_lang }}"
    register: sqlplus
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/target/ -type f -name setup.sql').split('\n') }}"
    when: search.artifact.found

  - name: Check failures in stdout
    set_fact:
      sqlplus_failures: "{{ sqlplus.results | sum(attribute='stdout_lines', start=[]) | select('match', 'SP2-0310|SP2-0546') | list }}"

  - fail: msg="{{ ['There are errors! Please check log files in ' + tmp_path + '/target/ directory:'] + sqlplus_failures }}"
    when: sqlplus_failures != []

  - name: Check failures in logs
    shell: "grep 'ERROR' --include='*.log' --exclude='sqlnet.log' -r {{ tmp_path }}/target/"
    register: failures
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - fail: msg="There are errors! Please check log files in {{ tmp_path }}/target/ directory"
    when: failures.stdout_lines != []

  - name: Remove temp directory
    file:
      path: "{{ tmp_path }}"
      state: absent

  delegate_to: localhost
  become: no
