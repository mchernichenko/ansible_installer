---
- name: Search artifact
  artifactory:
    path: "{{ artifactory.path }}*conf/it/local*"
  register: search

- debug:
    var: search
    verbosity: 1

- block:
  - name: Generate temp directory name
    set_fact:
      tmp_path: "{{ ansible_temp_dir | default('/tmp') }}/ansible-{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}_{{ 999999 | random }}"

  - name: Create temp directory
    delegate_to: localhost
    become: no
    file:
      path: "{{ tmp_path }}"
      state: directory

  - name: Find all dirs in tomcat-conf directory
    shell: find {{ app.conf_dir }} -maxdepth 1 -type d
    register: conf_dirs

  - name: Extend tomcat_additional_context variable
    set_fact:
      tomcat_common_loader: "{{ tomcat_common_loader + conf_dirs.stdout_lines|join(',') }}"

  - name: Download configs to local
    delegate_to: localhost
    become: no
    unarchive:
      src: "{{ artifactory.url }}/{{ search.artifact.full_path }}"
      dest: "{{ tmp_path }}"
      remote_src: yes

  - name: Save names of logback files
    find:
     path: "{{ app.conf_dir }}/logback"
     patterns: "*logback*.xml"
    register: logback_files

  # Создание директорий и рекурсивное раскладывание шаблонов на сервер
  - name: Create folders for configs
    file:
      dest: "{{ app.app_dir }}/{{ item|replace(tmp_path, '') }}"
      state: directory
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/ -mindepth 2 -type d').split('\n') }}"

  - name: Copy all templates recursively
    template:
      src: "{{ item }}"
      dest: "{{ app.app_dir }}/{{ item|replace(tmp_path, '') }}"
    with_items: "{{ lookup('pipe', 'find ' + tmp_path + '/ -mindepth 2 -type f').split('\n') }}"

  - name: Remove temp directory
    delegate_to: localhost
    become: no
    file:
      path: "{{ tmp_path }}"
      state: absent

  when: search.artifact.found
  rescue:
    - debug: msg='Tomcat configuration for artifact with path "{{ artifactory.path }}/conf/conf" failed'
